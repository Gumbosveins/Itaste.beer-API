#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReviewerAPI.Models.Connection
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Taster")]
	public partial class TasterDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRoom2ReviewType(Room2ReviewType instance);
    partial void UpdateRoom2ReviewType(Room2ReviewType instance);
    partial void DeleteRoom2ReviewType(Room2ReviewType instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertReviewPart(ReviewPart instance);
    partial void UpdateReviewPart(ReviewPart instance);
    partial void DeleteReviewPart(ReviewPart instance);
    partial void InsertBeverage(Beverage instance);
    partial void UpdateBeverage(Beverage instance);
    partial void DeleteBeverage(Beverage instance);
    partial void InsertBrewery(Brewery instance);
    partial void UpdateBrewery(Brewery instance);
    partial void DeleteBrewery(Brewery instance);
    partial void InsertBeverageGroup(BeverageGroup instance);
    partial void UpdateBeverageGroup(BeverageGroup instance);
    partial void DeleteBeverageGroup(BeverageGroup instance);
    partial void InsertBeverageType(BeverageType instance);
    partial void UpdateBeverageType(BeverageType instance);
    partial void DeleteBeverageType(BeverageType instance);
    partial void InsertReviewType(ReviewType instance);
    partial void UpdateReviewType(ReviewType instance);
    partial void DeleteReviewType(ReviewType instance);
    partial void InsertBeverageReview(BeverageReview instance);
    partial void UpdateBeverageReview(BeverageReview instance);
    partial void DeleteBeverageReview(BeverageReview instance);
    partial void InsertRoom2Beverage(Room2Beverage instance);
    partial void UpdateRoom2Beverage(Room2Beverage instance);
    partial void DeleteRoom2Beverage(Room2Beverage instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public TasterDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TasterConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TasterDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TasterDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TasterDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TasterDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Room2ReviewType> Room2ReviewTypes
		{
			get
			{
				return this.GetTable<Room2ReviewType>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ReviewPart> ReviewParts
		{
			get
			{
				return this.GetTable<ReviewPart>();
			}
		}
		
		public System.Data.Linq.Table<Beverage> Beverages
		{
			get
			{
				return this.GetTable<Beverage>();
			}
		}
		
		public System.Data.Linq.Table<Brewery> Breweries
		{
			get
			{
				return this.GetTable<Brewery>();
			}
		}
		
		public System.Data.Linq.Table<BeverageGroup> BeverageGroups
		{
			get
			{
				return this.GetTable<BeverageGroup>();
			}
		}
		
		public System.Data.Linq.Table<BeverageType> BeverageTypes
		{
			get
			{
				return this.GetTable<BeverageType>();
			}
		}
		
		public System.Data.Linq.Table<ReviewType> ReviewTypes
		{
			get
			{
				return this.GetTable<ReviewType>();
			}
		}
		
		public System.Data.Linq.Table<BeverageReview> BeverageReviews
		{
			get
			{
				return this.GetTable<BeverageReview>();
			}
		}
		
		public System.Data.Linq.Table<Room2Beverage> Room2Beverages
		{
			get
			{
				return this.GetTable<Room2Beverage>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room2ReviewType")]
	public partial class Room2ReviewType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RoomId;
		
		private int _ReviewTypeId;
		
		private int _DisplayOrder;
		
		private int _MaxValue;
		
		private EntityRef<ReviewType> _ReviewType;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnReviewTypeIdChanging(int value);
    partial void OnReviewTypeIdChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    partial void OnMaxValueChanging(int value);
    partial void OnMaxValueChanged();
    #endregion
		
		public Room2ReviewType()
		{
			this._ReviewType = default(EntityRef<ReviewType>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewTypeId", DbType="Int NOT NULL")]
		public int ReviewTypeId
		{
			get
			{
				return this._ReviewTypeId;
			}
			set
			{
				if ((this._ReviewTypeId != value))
				{
					if (this._ReviewType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewTypeId = value;
					this.SendPropertyChanged("ReviewTypeId");
					this.OnReviewTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Int NOT NULL")]
		public int MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReviewType_Room2ReviewType", Storage="_ReviewType", ThisKey="ReviewTypeId", OtherKey="Id", IsForeignKey=true)]
		public ReviewType ReviewType
		{
			get
			{
				return this._ReviewType.Entity;
			}
			set
			{
				ReviewType previousValue = this._ReviewType.Entity;
				if (((previousValue != value) 
							|| (this._ReviewType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReviewType.Entity = null;
						previousValue.Room2ReviewTypes.Remove(this);
					}
					this._ReviewType.Entity = value;
					if ((value != null))
					{
						value.Room2ReviewTypes.Add(this);
						this._ReviewTypeId = value.Id;
					}
					else
					{
						this._ReviewTypeId = default(int);
					}
					this.SendPropertyChanged("ReviewType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Room2ReviewType", Storage="_Room", ThisKey="RoomId", OtherKey="Id", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Room2ReviewTypes.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Room2ReviewTypes.Add(this);
						this._RoomId = value.Id;
					}
					else
					{
						this._RoomId = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _RoomId;
		
		private string _AvatarUrl;
		
		private string _Name;
		
		private bool _IsOwner;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<BeverageReview> _BeverageReviews;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnAvatarUrlChanging(string value);
    partial void OnAvatarUrlChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsOwnerChanging(bool value);
    partial void OnIsOwnerChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public User()
		{
			this._BeverageReviews = new EntitySet<BeverageReview>(new Action<BeverageReview>(this.attach_BeverageReviews), new Action<BeverageReview>(this.detach_BeverageReviews));
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarUrl", DbType="NVarChar(MAX)")]
		public string AvatarUrl
		{
			get
			{
				return this._AvatarUrl;
			}
			set
			{
				if ((this._AvatarUrl != value))
				{
					this.OnAvatarUrlChanging(value);
					this.SendPropertyChanging();
					this._AvatarUrl = value;
					this.SendPropertyChanged("AvatarUrl");
					this.OnAvatarUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOwner", DbType="Bit NOT NULL")]
		public bool IsOwner
		{
			get
			{
				return this._IsOwner;
			}
			set
			{
				if ((this._IsOwner != value))
				{
					this.OnIsOwnerChanging(value);
					this.SendPropertyChanging();
					this._IsOwner = value;
					this.SendPropertyChanged("IsOwner");
					this.OnIsOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BeverageReview", Storage="_BeverageReviews", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<BeverageReview> BeverageReviews
		{
			get
			{
				return this._BeverageReviews;
			}
			set
			{
				this._BeverageReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_User", Storage="_Room", ThisKey="RoomId", OtherKey="Id", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoomId = value.Id;
					}
					else
					{
						this._RoomId = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BeverageReviews(BeverageReview entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BeverageReviews(BeverageReview entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReviewPart")]
	public partial class ReviewPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _BeverageReviewId;
		
		private int _ReviewTypeId;
		
		private decimal _Score;
		
		private EntityRef<ReviewType> _ReviewType;
		
		private EntityRef<BeverageReview> _BeverageReview;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnBeverageReviewIdChanging(long value);
    partial void OnBeverageReviewIdChanged();
    partial void OnReviewTypeIdChanging(int value);
    partial void OnReviewTypeIdChanged();
    partial void OnScoreChanging(decimal value);
    partial void OnScoreChanged();
    #endregion
		
		public ReviewPart()
		{
			this._ReviewType = default(EntityRef<ReviewType>);
			this._BeverageReview = default(EntityRef<BeverageReview>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeverageReviewId", DbType="BigInt NOT NULL")]
		public long BeverageReviewId
		{
			get
			{
				return this._BeverageReviewId;
			}
			set
			{
				if ((this._BeverageReviewId != value))
				{
					if (this._BeverageReview.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeverageReviewIdChanging(value);
					this.SendPropertyChanging();
					this._BeverageReviewId = value;
					this.SendPropertyChanged("BeverageReviewId");
					this.OnBeverageReviewIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewTypeId", DbType="Int NOT NULL")]
		public int ReviewTypeId
		{
			get
			{
				return this._ReviewTypeId;
			}
			set
			{
				if ((this._ReviewTypeId != value))
				{
					if (this._ReviewType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewTypeId = value;
					this.SendPropertyChanged("ReviewTypeId");
					this.OnReviewTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Decimal(18,2) NOT NULL")]
		public decimal Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReviewType_ReviewPart", Storage="_ReviewType", ThisKey="ReviewTypeId", OtherKey="Id", IsForeignKey=true)]
		public ReviewType ReviewType
		{
			get
			{
				return this._ReviewType.Entity;
			}
			set
			{
				ReviewType previousValue = this._ReviewType.Entity;
				if (((previousValue != value) 
							|| (this._ReviewType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReviewType.Entity = null;
						previousValue.ReviewParts.Remove(this);
					}
					this._ReviewType.Entity = value;
					if ((value != null))
					{
						value.ReviewParts.Add(this);
						this._ReviewTypeId = value.Id;
					}
					else
					{
						this._ReviewTypeId = default(int);
					}
					this.SendPropertyChanged("ReviewType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeverageReview_ReviewPart", Storage="_BeverageReview", ThisKey="BeverageReviewId", OtherKey="Id", IsForeignKey=true)]
		public BeverageReview BeverageReview
		{
			get
			{
				return this._BeverageReview.Entity;
			}
			set
			{
				BeverageReview previousValue = this._BeverageReview.Entity;
				if (((previousValue != value) 
							|| (this._BeverageReview.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BeverageReview.Entity = null;
						previousValue.ReviewParts.Remove(this);
					}
					this._BeverageReview.Entity = value;
					if ((value != null))
					{
						value.ReviewParts.Add(this);
						this._BeverageReviewId = value.Id;
					}
					else
					{
						this._BeverageReviewId = default(long);
					}
					this.SendPropertyChanged("BeverageReview");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Beverage")]
	public partial class Beverage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _BreweryId;
		
		private decimal _AlcoholPercentage;
		
		private decimal _IBU;
		
		private string _Description;
		
		private int _MajorGroup;
		
		private string _ImageUrlSm;
		
		private string _ImageUrlMed;
		
		private string _LableSm;
		
		private string _LableMed;
		
		private int _Type;
		
		private bool _Accepted;
		
		private string _IpAddress;
		
		private decimal _UtappedRating;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<Room2Beverage> _Room2Beverages;
		
		private EntityRef<Brewery> _Brewery;
		
		private EntityRef<BeverageGroup> _BeverageGroup;
		
		private EntityRef<BeverageType> _BeverageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBreweryIdChanging(int value);
    partial void OnBreweryIdChanged();
    partial void OnAlcoholPercentageChanging(decimal value);
    partial void OnAlcoholPercentageChanged();
    partial void OnIBUChanging(decimal value);
    partial void OnIBUChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMajorGroupChanging(int value);
    partial void OnMajorGroupChanged();
    partial void OnImageUrlSmChanging(string value);
    partial void OnImageUrlSmChanged();
    partial void OnImageUrlMedChanging(string value);
    partial void OnImageUrlMedChanged();
    partial void OnLableSmChanging(string value);
    partial void OnLableSmChanged();
    partial void OnLableMedChanging(string value);
    partial void OnLableMedChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnAcceptedChanging(bool value);
    partial void OnAcceptedChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnUtappedRatingChanging(decimal value);
    partial void OnUtappedRatingChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Beverage()
		{
			this._Room2Beverages = new EntitySet<Room2Beverage>(new Action<Room2Beverage>(this.attach_Room2Beverages), new Action<Room2Beverage>(this.detach_Room2Beverages));
			this._Brewery = default(EntityRef<Brewery>);
			this._BeverageGroup = default(EntityRef<BeverageGroup>);
			this._BeverageType = default(EntityRef<BeverageType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreweryId", DbType="Int NOT NULL")]
		public int BreweryId
		{
			get
			{
				return this._BreweryId;
			}
			set
			{
				if ((this._BreweryId != value))
				{
					if (this._Brewery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBreweryIdChanging(value);
					this.SendPropertyChanging();
					this._BreweryId = value;
					this.SendPropertyChanged("BreweryId");
					this.OnBreweryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlcoholPercentage", DbType="Decimal(18,2) NOT NULL")]
		public decimal AlcoholPercentage
		{
			get
			{
				return this._AlcoholPercentage;
			}
			set
			{
				if ((this._AlcoholPercentage != value))
				{
					this.OnAlcoholPercentageChanging(value);
					this.SendPropertyChanging();
					this._AlcoholPercentage = value;
					this.SendPropertyChanged("AlcoholPercentage");
					this.OnAlcoholPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IBU", DbType="Decimal(18,2) NOT NULL")]
		public decimal IBU
		{
			get
			{
				return this._IBU;
			}
			set
			{
				if ((this._IBU != value))
				{
					this.OnIBUChanging(value);
					this.SendPropertyChanging();
					this._IBU = value;
					this.SendPropertyChanged("IBU");
					this.OnIBUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorGroup", DbType="Int NOT NULL")]
		public int MajorGroup
		{
			get
			{
				return this._MajorGroup;
			}
			set
			{
				if ((this._MajorGroup != value))
				{
					if (this._BeverageGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorGroupChanging(value);
					this.SendPropertyChanging();
					this._MajorGroup = value;
					this.SendPropertyChanged("MajorGroup");
					this.OnMajorGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrlSm", DbType="NVarChar(MAX)")]
		public string ImageUrlSm
		{
			get
			{
				return this._ImageUrlSm;
			}
			set
			{
				if ((this._ImageUrlSm != value))
				{
					this.OnImageUrlSmChanging(value);
					this.SendPropertyChanging();
					this._ImageUrlSm = value;
					this.SendPropertyChanged("ImageUrlSm");
					this.OnImageUrlSmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrlMed", DbType="NVarChar(MAX)")]
		public string ImageUrlMed
		{
			get
			{
				return this._ImageUrlMed;
			}
			set
			{
				if ((this._ImageUrlMed != value))
				{
					this.OnImageUrlMedChanging(value);
					this.SendPropertyChanging();
					this._ImageUrlMed = value;
					this.SendPropertyChanged("ImageUrlMed");
					this.OnImageUrlMedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LableSm", DbType="NVarChar(MAX)")]
		public string LableSm
		{
			get
			{
				return this._LableSm;
			}
			set
			{
				if ((this._LableSm != value))
				{
					this.OnLableSmChanging(value);
					this.SendPropertyChanging();
					this._LableSm = value;
					this.SendPropertyChanged("LableSm");
					this.OnLableSmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LableMed", DbType="NVarChar(MAX)")]
		public string LableMed
		{
			get
			{
				return this._LableMed;
			}
			set
			{
				if ((this._LableMed != value))
				{
					this.OnLableMedChanging(value);
					this.SendPropertyChanging();
					this._LableMed = value;
					this.SendPropertyChanged("LableMed");
					this.OnLableMedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._BeverageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accepted", DbType="Bit NOT NULL")]
		public bool Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this.OnAcceptedChanging(value);
					this.SendPropertyChanging();
					this._Accepted = value;
					this.SendPropertyChanged("Accepted");
					this.OnAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtappedRating", DbType="Decimal(18,2) NOT NULL")]
		public decimal UtappedRating
		{
			get
			{
				return this._UtappedRating;
			}
			set
			{
				if ((this._UtappedRating != value))
				{
					this.OnUtappedRatingChanging(value);
					this.SendPropertyChanging();
					this._UtappedRating = value;
					this.SendPropertyChanged("UtappedRating");
					this.OnUtappedRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beverage_Room2Beverage", Storage="_Room2Beverages", ThisKey="Id", OtherKey="BeverageId")]
		public EntitySet<Room2Beverage> Room2Beverages
		{
			get
			{
				return this._Room2Beverages;
			}
			set
			{
				this._Room2Beverages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brewery_Beverage", Storage="_Brewery", ThisKey="BreweryId", OtherKey="Id", IsForeignKey=true)]
		public Brewery Brewery
		{
			get
			{
				return this._Brewery.Entity;
			}
			set
			{
				Brewery previousValue = this._Brewery.Entity;
				if (((previousValue != value) 
							|| (this._Brewery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brewery.Entity = null;
						previousValue.Beverages.Remove(this);
					}
					this._Brewery.Entity = value;
					if ((value != null))
					{
						value.Beverages.Add(this);
						this._BreweryId = value.Id;
					}
					else
					{
						this._BreweryId = default(int);
					}
					this.SendPropertyChanged("Brewery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeverageGroup_Beverage", Storage="_BeverageGroup", ThisKey="MajorGroup", OtherKey="Id", IsForeignKey=true)]
		public BeverageGroup BeverageGroup
		{
			get
			{
				return this._BeverageGroup.Entity;
			}
			set
			{
				BeverageGroup previousValue = this._BeverageGroup.Entity;
				if (((previousValue != value) 
							|| (this._BeverageGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BeverageGroup.Entity = null;
						previousValue.Beverages.Remove(this);
					}
					this._BeverageGroup.Entity = value;
					if ((value != null))
					{
						value.Beverages.Add(this);
						this._MajorGroup = value.Id;
					}
					else
					{
						this._MajorGroup = default(int);
					}
					this.SendPropertyChanged("BeverageGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeverageType_Beverage", Storage="_BeverageType", ThisKey="Type", OtherKey="Id", IsForeignKey=true)]
		public BeverageType BeverageType
		{
			get
			{
				return this._BeverageType.Entity;
			}
			set
			{
				BeverageType previousValue = this._BeverageType.Entity;
				if (((previousValue != value) 
							|| (this._BeverageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BeverageType.Entity = null;
						previousValue.Beverages.Remove(this);
					}
					this._BeverageType.Entity = value;
					if ((value != null))
					{
						value.Beverages.Add(this);
						this._Type = value.Id;
					}
					else
					{
						this._Type = default(int);
					}
					this.SendPropertyChanged("BeverageType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Room2Beverages(Room2Beverage entity)
		{
			this.SendPropertyChanging();
			entity.Beverage = this;
		}
		
		private void detach_Room2Beverages(Room2Beverage entity)
		{
			this.SendPropertyChanging();
			entity.Beverage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brewery")]
	public partial class Brewery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Logo;
		
		private string _Country;
		
		private string _City;
		
		private string _Twitter;
		
		private string _Facebook;
		
		private string _WebPage;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Beverage> _Beverages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnTwitterChanging(string value);
    partial void OnTwitterChanged();
    partial void OnFacebookChanging(string value);
    partial void OnFacebookChanged();
    partial void OnWebPageChanging(string value);
    partial void OnWebPageChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Brewery()
		{
			this._Beverages = new EntitySet<Beverage>(new Action<Beverage>(this.attach_Beverages), new Action<Beverage>(this.detach_Beverages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="NVarChar(MAX)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(200)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Twitter", DbType="NVarChar(MAX)")]
		public string Twitter
		{
			get
			{
				return this._Twitter;
			}
			set
			{
				if ((this._Twitter != value))
				{
					this.OnTwitterChanging(value);
					this.SendPropertyChanging();
					this._Twitter = value;
					this.SendPropertyChanged("Twitter");
					this.OnTwitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Facebook", DbType="NVarChar(MAX)")]
		public string Facebook
		{
			get
			{
				return this._Facebook;
			}
			set
			{
				if ((this._Facebook != value))
				{
					this.OnFacebookChanging(value);
					this.SendPropertyChanging();
					this._Facebook = value;
					this.SendPropertyChanged("Facebook");
					this.OnFacebookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebPage", DbType="NVarChar(MAX)")]
		public string WebPage
		{
			get
			{
				return this._WebPage;
			}
			set
			{
				if ((this._WebPage != value))
				{
					this.OnWebPageChanging(value);
					this.SendPropertyChanging();
					this._WebPage = value;
					this.SendPropertyChanged("WebPage");
					this.OnWebPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brewery_Beverage", Storage="_Beverages", ThisKey="Id", OtherKey="BreweryId")]
		public EntitySet<Beverage> Beverages
		{
			get
			{
				return this._Beverages;
			}
			set
			{
				this._Beverages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Beverages(Beverage entity)
		{
			this.SendPropertyChanging();
			entity.Brewery = this;
		}
		
		private void detach_Beverages(Beverage entity)
		{
			this.SendPropertyChanging();
			entity.Brewery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeverageGroup")]
	public partial class BeverageGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _DisplayOrder;
		
		private EntitySet<Beverage> _Beverages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public BeverageGroup()
		{
			this._Beverages = new EntitySet<Beverage>(new Action<Beverage>(this.attach_Beverages), new Action<Beverage>(this.detach_Beverages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeverageGroup_Beverage", Storage="_Beverages", ThisKey="Id", OtherKey="MajorGroup")]
		public EntitySet<Beverage> Beverages
		{
			get
			{
				return this._Beverages;
			}
			set
			{
				this._Beverages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Beverages(Beverage entity)
		{
			this.SendPropertyChanging();
			entity.BeverageGroup = this;
		}
		
		private void detach_Beverages(Beverage entity)
		{
			this.SendPropertyChanging();
			entity.BeverageGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeverageType")]
	public partial class BeverageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _DisplayOrder;
		
		private EntitySet<Beverage> _Beverages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public BeverageType()
		{
			this._Beverages = new EntitySet<Beverage>(new Action<Beverage>(this.attach_Beverages), new Action<Beverage>(this.detach_Beverages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeverageType_Beverage", Storage="_Beverages", ThisKey="Id", OtherKey="Type")]
		public EntitySet<Beverage> Beverages
		{
			get
			{
				return this._Beverages;
			}
			set
			{
				this._Beverages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Beverages(Beverage entity)
		{
			this.SendPropertyChanging();
			entity.BeverageType = this;
		}
		
		private void detach_Beverages(Beverage entity)
		{
			this.SendPropertyChanging();
			entity.BeverageType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReviewType")]
	public partial class ReviewType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _Accepted;
		
		private string _IpAddress;
		
		private System.DateTime _DateAdded;
		
		private string _Abbr;
		
		private EntitySet<Room2ReviewType> _Room2ReviewTypes;
		
		private EntitySet<ReviewPart> _ReviewParts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAcceptedChanging(bool value);
    partial void OnAcceptedChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnAbbrChanging(string value);
    partial void OnAbbrChanged();
    #endregion
		
		public ReviewType()
		{
			this._Room2ReviewTypes = new EntitySet<Room2ReviewType>(new Action<Room2ReviewType>(this.attach_Room2ReviewTypes), new Action<Room2ReviewType>(this.detach_Room2ReviewTypes));
			this._ReviewParts = new EntitySet<ReviewPart>(new Action<ReviewPart>(this.attach_ReviewParts), new Action<ReviewPart>(this.detach_ReviewParts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accepted", DbType="Bit NOT NULL")]
		public bool Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this.OnAcceptedChanging(value);
					this.SendPropertyChanging();
					this._Accepted = value;
					this.SendPropertyChanged("Accepted");
					this.OnAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbr", DbType="NVarChar(50)")]
		public string Abbr
		{
			get
			{
				return this._Abbr;
			}
			set
			{
				if ((this._Abbr != value))
				{
					this.OnAbbrChanging(value);
					this.SendPropertyChanging();
					this._Abbr = value;
					this.SendPropertyChanged("Abbr");
					this.OnAbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReviewType_Room2ReviewType", Storage="_Room2ReviewTypes", ThisKey="Id", OtherKey="ReviewTypeId")]
		public EntitySet<Room2ReviewType> Room2ReviewTypes
		{
			get
			{
				return this._Room2ReviewTypes;
			}
			set
			{
				this._Room2ReviewTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReviewType_ReviewPart", Storage="_ReviewParts", ThisKey="Id", OtherKey="ReviewTypeId")]
		public EntitySet<ReviewPart> ReviewParts
		{
			get
			{
				return this._ReviewParts;
			}
			set
			{
				this._ReviewParts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Room2ReviewTypes(Room2ReviewType entity)
		{
			this.SendPropertyChanging();
			entity.ReviewType = this;
		}
		
		private void detach_Room2ReviewTypes(Room2ReviewType entity)
		{
			this.SendPropertyChanging();
			entity.ReviewType = null;
		}
		
		private void attach_ReviewParts(ReviewPart entity)
		{
			this.SendPropertyChanging();
			entity.ReviewType = this;
		}
		
		private void detach_ReviewParts(ReviewPart entity)
		{
			this.SendPropertyChanging();
			entity.ReviewType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeverageReview")]
	public partial class BeverageReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Guid _UserId;
		
		private int _BeverageId;
		
		private int _RoomId;
		
		private decimal _TotalScore;
		
		private System.DateTime _DateCreated;
		
		private string _Comment;
		
		private EntitySet<ReviewPart> _ReviewParts;
		
		private EntityRef<User> _User;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnBeverageIdChanging(int value);
    partial void OnBeverageIdChanged();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnTotalScoreChanging(decimal value);
    partial void OnTotalScoreChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public BeverageReview()
		{
			this._ReviewParts = new EntitySet<ReviewPart>(new Action<ReviewPart>(this.attach_ReviewParts), new Action<ReviewPart>(this.detach_ReviewParts));
			this._User = default(EntityRef<User>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeverageId", DbType="Int NOT NULL")]
		public int BeverageId
		{
			get
			{
				return this._BeverageId;
			}
			set
			{
				if ((this._BeverageId != value))
				{
					this.OnBeverageIdChanging(value);
					this.SendPropertyChanging();
					this._BeverageId = value;
					this.SendPropertyChanged("BeverageId");
					this.OnBeverageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalScore", DbType="Decimal(18,2) NOT NULL")]
		public decimal TotalScore
		{
			get
			{
				return this._TotalScore;
			}
			set
			{
				if ((this._TotalScore != value))
				{
					this.OnTotalScoreChanging(value);
					this.SendPropertyChanging();
					this._TotalScore = value;
					this.SendPropertyChanged("TotalScore");
					this.OnTotalScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(250)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeverageReview_ReviewPart", Storage="_ReviewParts", ThisKey="Id", OtherKey="BeverageReviewId")]
		public EntitySet<ReviewPart> ReviewParts
		{
			get
			{
				return this._ReviewParts;
			}
			set
			{
				this._ReviewParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BeverageReview", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BeverageReviews.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BeverageReviews.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_BeverageReview", Storage="_Room", ThisKey="RoomId", OtherKey="Id", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.BeverageReviews.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.BeverageReviews.Add(this);
						this._RoomId = value.Id;
					}
					else
					{
						this._RoomId = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReviewParts(ReviewPart entity)
		{
			this.SendPropertyChanging();
			entity.BeverageReview = this;
		}
		
		private void detach_ReviewParts(ReviewPart entity)
		{
			this.SendPropertyChanging();
			entity.BeverageReview = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room2Beverage")]
	public partial class Room2Beverage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RoomId;
		
		private int _BeverageId;
		
		private int _DisplayOrder;
		
		private decimal _FinalScore;
		
		private bool _IsLocked;
		
		private bool _ReviewFinished;
		
		private EntityRef<Beverage> _Beverage;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnBeverageIdChanging(int value);
    partial void OnBeverageIdChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    partial void OnFinalScoreChanging(decimal value);
    partial void OnFinalScoreChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    partial void OnReviewFinishedChanging(bool value);
    partial void OnReviewFinishedChanged();
    #endregion
		
		public Room2Beverage()
		{
			this._Beverage = default(EntityRef<Beverage>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeverageId", DbType="Int NOT NULL")]
		public int BeverageId
		{
			get
			{
				return this._BeverageId;
			}
			set
			{
				if ((this._BeverageId != value))
				{
					if (this._Beverage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeverageIdChanging(value);
					this.SendPropertyChanging();
					this._BeverageId = value;
					this.SendPropertyChanged("BeverageId");
					this.OnBeverageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalScore", DbType="Decimal(18,2) NOT NULL")]
		public decimal FinalScore
		{
			get
			{
				return this._FinalScore;
			}
			set
			{
				if ((this._FinalScore != value))
				{
					this.OnFinalScoreChanging(value);
					this.SendPropertyChanging();
					this._FinalScore = value;
					this.SendPropertyChanged("FinalScore");
					this.OnFinalScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocked", DbType="Bit NOT NULL")]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewFinished", DbType="Bit NOT NULL")]
		public bool ReviewFinished
		{
			get
			{
				return this._ReviewFinished;
			}
			set
			{
				if ((this._ReviewFinished != value))
				{
					this.OnReviewFinishedChanging(value);
					this.SendPropertyChanging();
					this._ReviewFinished = value;
					this.SendPropertyChanged("ReviewFinished");
					this.OnReviewFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beverage_Room2Beverage", Storage="_Beverage", ThisKey="BeverageId", OtherKey="Id", IsForeignKey=true)]
		public Beverage Beverage
		{
			get
			{
				return this._Beverage.Entity;
			}
			set
			{
				Beverage previousValue = this._Beverage.Entity;
				if (((previousValue != value) 
							|| (this._Beverage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Beverage.Entity = null;
						previousValue.Room2Beverages.Remove(this);
					}
					this._Beverage.Entity = value;
					if ((value != null))
					{
						value.Room2Beverages.Add(this);
						this._BeverageId = value.Id;
					}
					else
					{
						this._BeverageId = default(int);
					}
					this.SendPropertyChanged("Beverage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Room2Beverage", Storage="_Room", ThisKey="RoomId", OtherKey="Id", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Room2Beverages.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Room2Beverages.Add(this);
						this._RoomId = value.Id;
					}
					else
					{
						this._RoomId = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Code;
		
		private string _Name;
		
		private int _Pin;
		
		private int _RoomType;
		
		private string _Owner;
		
		private System.DateTime _DateCreated;
		
		private string _BlindRevealCode;
		
		private EntitySet<Room2ReviewType> _Room2ReviewTypes;
		
		private EntitySet<User> _Users;
		
		private EntitySet<BeverageReview> _BeverageReviews;
		
		private EntitySet<Room2Beverage> _Room2Beverages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPinChanging(int value);
    partial void OnPinChanged();
    partial void OnRoomTypeChanging(int value);
    partial void OnRoomTypeChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnBlindRevealCodeChanging(string value);
    partial void OnBlindRevealCodeChanged();
    #endregion
		
		public Room()
		{
			this._Room2ReviewTypes = new EntitySet<Room2ReviewType>(new Action<Room2ReviewType>(this.attach_Room2ReviewTypes), new Action<Room2ReviewType>(this.detach_Room2ReviewTypes));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._BeverageReviews = new EntitySet<BeverageReview>(new Action<BeverageReview>(this.attach_BeverageReviews), new Action<BeverageReview>(this.detach_BeverageReviews));
			this._Room2Beverages = new EntitySet<Room2Beverage>(new Action<Room2Beverage>(this.attach_Room2Beverages), new Action<Room2Beverage>(this.detach_Room2Beverages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pin", DbType="Int NOT NULL")]
		public int Pin
		{
			get
			{
				return this._Pin;
			}
			set
			{
				if ((this._Pin != value))
				{
					this.OnPinChanging(value);
					this.SendPropertyChanging();
					this._Pin = value;
					this.SendPropertyChanged("Pin");
					this.OnPinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomType", DbType="Int NOT NULL")]
		public int RoomType
		{
			get
			{
				return this._RoomType;
			}
			set
			{
				if ((this._RoomType != value))
				{
					this.OnRoomTypeChanging(value);
					this.SendPropertyChanging();
					this._RoomType = value;
					this.SendPropertyChanged("RoomType");
					this.OnRoomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlindRevealCode", DbType="NVarChar(50)")]
		public string BlindRevealCode
		{
			get
			{
				return this._BlindRevealCode;
			}
			set
			{
				if ((this._BlindRevealCode != value))
				{
					this.OnBlindRevealCodeChanging(value);
					this.SendPropertyChanging();
					this._BlindRevealCode = value;
					this.SendPropertyChanged("BlindRevealCode");
					this.OnBlindRevealCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Room2ReviewType", Storage="_Room2ReviewTypes", ThisKey="Id", OtherKey="RoomId")]
		public EntitySet<Room2ReviewType> Room2ReviewTypes
		{
			get
			{
				return this._Room2ReviewTypes;
			}
			set
			{
				this._Room2ReviewTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_User", Storage="_Users", ThisKey="Id", OtherKey="RoomId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_BeverageReview", Storage="_BeverageReviews", ThisKey="Id", OtherKey="RoomId")]
		public EntitySet<BeverageReview> BeverageReviews
		{
			get
			{
				return this._BeverageReviews;
			}
			set
			{
				this._BeverageReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Room2Beverage", Storage="_Room2Beverages", ThisKey="Id", OtherKey="RoomId")]
		public EntitySet<Room2Beverage> Room2Beverages
		{
			get
			{
				return this._Room2Beverages;
			}
			set
			{
				this._Room2Beverages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Room2ReviewTypes(Room2ReviewType entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Room2ReviewTypes(Room2ReviewType entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_BeverageReviews(BeverageReview entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_BeverageReviews(BeverageReview entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_Room2Beverages(Room2Beverage entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Room2Beverages(Room2Beverage entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
